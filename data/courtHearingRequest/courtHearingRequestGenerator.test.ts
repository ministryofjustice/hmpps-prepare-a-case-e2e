import test, { expect } from "@playwright/test";
import courtHearingGenerator, { hearingSessionTimes } from "./courtHearingRequestGenerator";
import { simpleDefinedTest } from "@data/testUtils";
import { courtCentres, Sheffield } from "./courtCentres.data";
import { CourtHearingRequest, HearingSessionTimes, InitiationCode, JurisdictionType } from "./courtHearingRequest.d";
import moment from "moment";
import { faker } from "@faker-js/faker";

test.describe('Court Hearing Request Generator', async () => {
    const sut = courtHearingGenerator()

    test.describe('Default fields without options', async () => {
        const result = sut.generate()

        expect(result.hearing).toBeDefined()
        const hearing = result.hearing

        simpleDefinedTest('Id', hearing.id)

        test.describe('Court Centre', async () => {
            const courtCentre = hearing.courtCentre
            
            simpleDefinedTest('Id', courtCentre.id)
            simpleDefinedTest('Code', courtCentre.code)
            simpleDefinedTest('Name', courtCentre.name)
            simpleDefinedTest('Room Id', courtCentre.roomId)
            test('Room Name', async () => {
                expect(courtCentre.roomName).toBeDefined()
                const roomNameNumber = parseInt(courtCentre.roomName)
                expect(roomNameNumber).toBeGreaterThanOrEqual(1)
                expect(roomNameNumber).toBeLessThanOrEqual(20)
            })         
        })
        test.describe('Type', async () => {
            const hearingType = hearing.type

            simpleDefinedTest('Id', hearingType.id)
            simpleDefinedTest('Description', hearingType.description)
        })
        test('Jusrisdiction Type', async () => {
            expect(hearing.jurisdictionType).toEqual(JurisdictionType.MAGISTRATES)
        })
        test.describe('Hearing Days', async () => {
            const hearingsDays = hearing.hearingDays

            expect(hearingsDays).toHaveLength(1)

            test.describe('Default hearing day', async () => {
                const hearingDay = hearingsDays.at(0)

                test('Listed Duration Minutes', async () => {
                    expect(hearingDay.listedDurationMinutes).toBeDefined()
                    expect(hearingDay.listedDurationMinutes).toBeGreaterThanOrEqual(10)
                    expect(hearingDay.listedDurationMinutes).toBeLessThanOrEqual(60)
                    expect(hearingDay.listedDurationMinutes % 10).toEqual(0)
                })
                simpleDefinedTest('Sitting Day', hearingDay.sittingDay)
            })
        })
        test.describe('Prosecution Cases', async () => {
            const prosecutionCases = hearing.prosecutionCases

            expect(prosecutionCases).toHaveLength(1)

            test.describe('Default Prosecution Case', async () => {
                const prosecutionCase = prosecutionCases.at(0)

                simpleDefinedTest('Id', prosecutionCase.id)
                test('Initiation Code', async () => {
                    expect(prosecutionCase.initiationCode).toBeDefined()
                    expect(prosecutionCase.initiationCode).toEqual(InitiationCode.Charge)
                })
                test.describe('Prosecution Case Identifier', async () => {
                    const prosecutionCaseIdentifier = prosecutionCase.prosecutionCaseIdentifier

                    simpleDefinedTest('Prosecution Authority Id', prosecutionCaseIdentifier.prosecutionAuthorityId)
                    test('Prosecution Authority Code', async () => {
                        expect(prosecutionCaseIdentifier.prosecutionAuthorityCode).toBeDefined()
                        expect(prosecutionCaseIdentifier.prosecutionAuthorityCode).toEqual("CPS")
                    })
                    test('Case URN', async () => {
                        expect(prosecutionCaseIdentifier.caseURN).toBeDefined()
                        expect(prosecutionCaseIdentifier.caseURN).toMatch(/^\d{2}\w{2}\d{8}$/)
                    })
                })
                test.describe('Defendants', async () => {
                    const defendants = prosecutionCase.defendants

                    expect(defendants).toHaveLength(1)

                    test.describe('Default Defendant', async () => {
                        const defendant = defendants.at(0)

                        simpleDefinedTest('Id', defendant.id)
                        test.describe('Offences', async () => {
                            const offences = defendant.offences

                            expect(offences).toHaveLength(1)

                            test.describe('Default Offence', async () => {
                                /**
                                 * Generated by the OffenceGenerator so details passed over
                                 * to that test suite
                                 */
                                simpleDefinedTest('Offence', offences.at(0))
                            })
                        })
                        simpleDefinedTest('Prosecution Case Id', defendant.prosecutionCaseId)
                        test.describe('Person Defendant', () => {
                            expect(defendant.personDefendant).toBeDefined()

                            test.describe('Person Details', async () => {
                                const personDetails = defendant.personDefendant.personDetails

                                test.describe('Default Person Details', async () => {
                                    /**
                                     * Generated by the PersonGenerator so details passed over
                                     * to that test suite
                                     */
                                    simpleDefinedTest('Person Detail', personDetails)
                                })
                            })
                        })
                    })
                })
            })
        })
    })

    test.describe('Court options', async () => {
        test(' None specified: default behaviour - uses Sheffield', async () => {
            const result = sut.generate()

            expect(result.hearing.courtCentre.code).toEqual(Sheffield.code)
            expect(result.hearing.courtCentre.name).toEqual(Sheffield.name)
        })
        test.describe('Court centre specified', async () => {
            courtCentres.forEach(centre => {
                test(`- Court Centre: ${centre.name} (${centre.code})`, async () => {
                    const result = sut.generate({ court: centre })

                    expect(result.hearing.courtCentre.name).toEqual(centre.name)
                    expect(result.hearing.courtCentre.code).toEqual(centre.code)
                })
            })
        })
    })

    
    const testForExpectedSitting = (result: CourtHearingRequest, expectedSitting: string) => {
        const hearingDay = result.hearing.hearingDays.at(0)

        expect(hearingDay.sittingDay).toBeDefined()
        expect(hearingDay.sittingDay).toEqual(expectedSitting)
    }
    test.describe('Hearing Day options', async () => {
        test('None specified: default behaviour - today/morning session', async () => {
            const expectedSitting = `${moment().format('YYYY-MM-DD')}T09:00:00.000Z`
            const result = sut.generate()

            testForExpectedSitting(result, expectedSitting)
        })

        test('Hearing Date specified/Session not specified - Date used, session default', async () => {
            const randomDate = faker.date.past()
            const expectedSitting = `${moment(randomDate).format('YYYY-MM-DD')}T09:00:00.000Z`
            const result = sut.generate({ hearingDay: { hearingDate: randomDate }})
            
            testForExpectedSitting(result, expectedSitting)
        })

        test.describe('Hearing Date not specified/Session specified - Date default, session used', async () => {
            Object.keys(hearingSessionTimes).forEach((sessionKey: keyof HearingSessionTimes) => {
                test(`- ${sessionKey}`, async () => {
                    const expectedSitting = `${moment().format('YYYY-MM-DD')}T${hearingSessionTimes[sessionKey].toString().padStart(2, '0')}:00:00.000Z`
                    const result = sut.generate({ hearingDay: { hearingSession: sessionKey }})

                    testForExpectedSitting(result, expectedSitting)
                })
            })
        })

        test.describe('Hearing Date specified/Session specified - Both used', async () => {
            const randomDate = faker.date.past()
            Object.keys(hearingSessionTimes).forEach((sessionKey: keyof HearingSessionTimes) => {
                test(`- ${sessionKey}`, async () => {
                    const expectedSitting = `${moment(randomDate).format('YYYY-MM-DD')}T${hearingSessionTimes[sessionKey].toString().padStart(2, '0')}:00:00.000Z`
                    const result = sut.generate({ hearingDay: { hearingDate: randomDate, hearingSession: sessionKey }})

                    testForExpectedSitting(result, expectedSitting)
                })
            })
        })
    })

    test.describe('Number of Offences options', async () => {
        test('None specified: default behaviour - 1 offence', async () => {
            const result = sut.generate()

            expect(result.hearing.prosecutionCases.at(0).defendants.at(0).offences).toHaveLength(1)
        })

        test('Specified Number of Offences', async () => {
            const randomNumberOfOffences = faker.number.int({ min: 1, max: 9})
            const result = sut.generate({ numOfOffences: randomNumberOfOffences })

            expect(result.hearing.prosecutionCases.at(0).defendants.at(0).offences).toHaveLength(randomNumberOfOffences)
        })
    })
})